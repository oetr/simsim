* TODO Next steps
** Put everything in its right place
- Instructions
- CPU state manipulation
- Increase the current clock cycle based on the table
- Reading the hex-file
** Add missing functions
** Assume installed objdump, don't require user to provide the symbol table
** Generalize individual debugging info: don't use fprintf
** Load using "require"
** TODO Add Hamming distance to the leakage tracker
** Only leak individual bits of the status register once
** Add tests for each assembly instruction
:LOGBOOK:
CLOCK: [2016-02-16 Tue 22:17]--[2016-02-16 Tue 23:57] =>  1:40
:END:
* DONE FINISHED
** DONE Keep track of number of passed clock cycles
** DONE Work out the file-format for saved data
** DONE Make a Racket module with nice abstractions instead of one huge file
** DONE Add a comfortable testsuite: assembly + Racket tests
** DONE Separate fetching and execution
- fetch: analyzes the instruction and extracts its arguments
- execute: takes the arguments and executes the instruction
-> we can look at the code without executing it!
-> the code might look less messy
* DEFERRED
** TODO Opcode analysis: what is the Hamming weight of each opcode?
